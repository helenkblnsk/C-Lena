#include <iostream>
#include <string>
#include <ctime>
#include <math.h>
#include <fstream>
#include <windows.h>


using namespace std;



struct Worker
{
  string name;
  string surname;
  string patronymic;
  string nationality;
  string country;
  string region;
  string city;
  string street;
  string education;


  int home;
  int flat;
  int cehNum;
  int tabNum;
  int yearStartWork;
  int index;
  

  void show()
  {
    cout << "F: " << name << endl;
    cout << "I: " << surname<< endl;
    cout << "O: " << patronymic << endl;
    cout << "nationality: " << nationality<< endl;
    cout << "country " << country << endl;
    cout << "region " << region;
    cout << "city " << city<< endl;
    cout << "street " << street<< endl;
    cout << "education " << education << endl;

    cout << "home " << home << endl;
    cout << "flat " << flat << endl;
    cout << "cehNum " << cehNum << endl;
    cout << "tabNum " << tabNum << endl;
    cout << "yearStartWork " << yearStartWork << endl;
    cout << "index " << index << endl;
    cout << endl;
  }
};


void Task1()
{
  string path = "file1.txt";

  unsigned const int sizeArr = 10;
  Worker *worker = new Worker[sizeArr];
  

  ofstream fout;
  fout.open(path);

  string word = "asa";
  for (int i = 0; i < sizeArr; i++)// инициализация
  {
    worker[i].name = word;
    worker[i].surname = word;
    worker[i].patronymic = word;
    worker[i].nationality = word;
    worker[i].country = word;
    worker[i].region = word;
    worker[i].city = word;
    worker[i].street = word;
    worker[i].education = word;
    
    worker[i].home = rand() % 200;
    worker[i].flat = rand() % 200;
    worker[i].cehNum = rand() % 200;
    worker[i].tabNum = rand() % 200;
    worker[i].yearStartWork = rand() % 11 + 2000;
    worker[i].index = rand() % 200;
  }

  for (int i = 0; i < sizeArr; i++)
    fout.write((char*)&worker[i], sizeof(Worker));// запись объектов в файл
  
  fout.close();

  for (int i = 0; i < sizeArr; i++)
    worker[i].show();

  


  delete[]  worker;
  worker = new Worker[sizeArr];

  for (int i = 0; i < sizeArr; i++)
    worker[i].show();
  



  ifstream  fin(path);// Чтение

  for (int i = 0; i < sizeArr; i++)// считываем
    fin.read((char*)&worker[i], sizeof(Worker));

  bool found = false;
  for (int i = 0; i < sizeArr; i++)
  {
    if (worker[i].yearStartWork == 2010)
    {
      found = true;
      cout << "found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
      worker[i].show();
    }
    
  }
  if (!found) cout << "not found info" << endl;
  

  fin.close();
}
void Task2()
{
  string path = "file2.txt";
  fstream fs;

  fs.open(path, ios_base::in | ios_base::out | ios_base::trunc);// trunc - перезаписывает если файла нет создат 
  unsigned const int sizeArr = 10;


  for (int i = 0; i < sizeArr; i++)// запись 
    fs << (rand() % 50) << "\n";


  fs.seekg(0, ios_base::beg);// курсор в начало


  int score = 0;
  int temp;
  for (fs >> temp; !fs.eof(); fs >> temp)// чтение
  {
    cout << temp << " ";
    if (temp % 2 == 0)score++;
  }
  

  cout << endl << endl;
  cout << "chetnih: " << score << endl;


  fs.close();
}
void Task3()
{
  string path1 = "file3.txt";
  fstream fs1;
  fs1.open(path1, ios_base::in | ios_base::out | ios_base::trunc);// trunc - перезаписывает, 404 - cоздаст

  string path2 = "file4.txt";
  fstream fs2;
  fs2.open(path2, ios_base::in | ios_base::out | ios_base::trunc);// trunc - перезаписывает, 404 - cоздаст
  

  unsigned const int sizeX = 3;
  unsigned const int sizeY = 3;

  unsigned const int size1 = 3;
  unsigned const int size2 = size1;

  int matr = 2;

  int arr1[size1][sizeY][sizeX];
  int arr2[size2][sizeY][sizeX];

  for (int s = 0; s < size1; s++)
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
        fs1 << rand() % 10 << endl;
    }
  }
  for (int s = 0; s < size2 - matr; s++)
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
        fs2 << rand() % 10 << endl;
    }
  }
  
  fs1.seekg(0, ios_base::beg);// курсор в начало
  fs2.seekg(0, ios_base::beg);// курсор в начало


  string temp;
  for (int s = 0; s < size1; s++)
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        fs1 >> temp;
        arr1[s][y][x] = stoi(temp);
      }
    }
  }
  for (int s = 0; s < size2 - matr; s++)// уменьшим кол-во матриц
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        fs2 >> temp;
        arr2[s][y][x] = stoi(temp);
      }
    }
  }

  cout << "1е матрици: " << endl;
  for (int s = 0; s < size1; s++)// вывод 1 матриц
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        cout << arr1[s][y][x];
      }
      cout << endl;
    }
    cout << endl;
  }

  cout << "2е матрици: " << endl;
  for (int s = 0; s < size2; s++)// вывод 2 матриц
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        cout << arr2[s][y][x];
      }
      cout << endl;
    }
    cout << endl;
  }
  fs1.close();
  fs1.open(path1, ios_base::app);
  fs2.close();
  fs2.open(path2, ios_base::app);


  for (int s = 0; s < matr; s++)// заполнение пустых матриц
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        if (size2 > size1)
        {
          if (x == y)fs1 << 1 << endl;
          else fs1 << 0 << endl;
        }
        else
        {
          if (x == y)fs2 << 1 << endl;
          else fs2 << 0 << endl;
        }
      }
    }
  }

  fs2.close();
  fs2.open(path2, ios_base::in);

  cout << "all 1 file" << endl;
  for (int s = 0; s < size1; s++)
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        cout << arr1[s][y][x];
      }
      cout << endl;
    }
    cout << endl;
  }

  cout << "all 2 file" << endl;
  for (int s = 0; s < size2; s++)
  {
    for (int y = 0; y < sizeY; y++)
    {
      for (int x = 0; x < sizeX; x++)
      {
        fs2 >> temp;
        cout << (arr2[s][y][x] = stoi(temp));
      }
      cout << endl;
    }
    cout << endl;
  }

  fs1.close();
  fs2.close();
}
void main()
{
  setlocale(LC_ALL, "Rus");
  srand(time(NULL));


  int num;
  cout << "введите задание 1-3:";
  cin >> num;
  switch (num)
  {
  case 1:
    Task1();
    break;
  case 2:
    Task2();
    break;
  case 3:
    Task3();
    break;
  default:
    cout << "404 not found";
    break;
  }


  system("pause");
}
